# Generated by Django 3.0.6 on 2020-05-26 09:45

from django.conf import settings
import django.contrib.postgres.fields.jsonb
import django.contrib.postgres.search
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import miller.fields
import miller.models.document
import miller.models.story


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.CharField(blank=True, max_length=140, unique=True)),
                ('fullname', models.TextField()),
                ('affiliation', models.TextField(blank=True, null=True)),
                ('data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict, help_text='JSON format', verbose_name='metadata contents')),
                ('orcid', models.CharField(blank=True, max_length=24, validators=[django.core.validators.RegexValidator(message="ORCID should contain only numbers and '-' sign", regex='^[\\d\\-]+$')])),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='authorship', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Caption',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateField(auto_now=True)),
                ('contents', models.TextField(blank=True, default='')),
            ],
            options={
                'verbose_name_plural': 'captions',
                'ordering': ['-date_created'],
            },
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attachment', models.FileField(blank=True, max_length=200, null=True, upload_to=miller.models.document.attachment_file_name)),
                ('copyrights', models.TextField(blank=True, default='', null=True)),
                ('data', miller.fields.UTF8JSONField(blank=True, default=dict, help_text='JSON format', verbose_name='data contents')),
                ('date_created', models.DateTimeField(auto_now_add=True, default=django.utils.timezone.now)),
                ('date_last_modified', models.DateTimeField(auto_now=True)),
                ('documents', models.ManyToManyField(blank=True, related_name='_document_documents_+', to='miller.Document')),
                ('locked', models.BooleanField(default=False)),
                ('mimetype', models.CharField(blank=True, default='', max_length=127)),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('search_vector', django.contrib.postgres.search.SearchVectorField(blank=True, null=True)),
                ('short_url', models.CharField(blank=True, db_index=True, max_length=22, unique=True)),
                ('slug', models.CharField(blank=True, db_index=True, max_length=150, unique=True)),
                ('snapshot', models.FileField(blank=True, max_length=200, null=True, upload_to=miller.models.document.snapshot_attachment_file_name)),
                ('title', models.CharField(default='', max_length=500)),
                ('type', models.CharField(choices=[('to be defined', 'to be defined'), ('bibtex', 'bibtex'), ('crossref', 'bibtex'), ('video-cover', 'video interview'), ('video', 'video'), ('text', 'text'), ('picture', 'picture'), ('pdf', 'pdf'), ('image', 'image'), ('photo', 'photo'), ('rich', 'rich'), ('link', 'link'), ('audiovisual', 'audiovisual'), ('entity', 'entity: see data type property')], default='to be defined', max_length=24)),
                ('url', models.URLField(blank=True, max_length=500, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Mention',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'mentions',
                'ordering': ['-date_created'],
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('slug', models.SlugField(blank=True, max_length=100, unique=True)),
                ('category', models.CharField(choices=[('keyword', 'keyword'), ('blog', 'blog'), ('highlights', 'highlights'), ('writing', 'writing'), ('collection', 'collection'), ('publishing', 'publishing')], default='keyword', max_length=32)),
                ('status', models.CharField(choices=[('hidden', 'keep this hidden'), ('public', 'published tag')], default='public', max_length=10)),
                ('data', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
            ],
            options={
                'unique_together': {('name', 'category')},
            },
        ),
        migrations.CreateModel(
            name='Story',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('short_url', models.CharField(db_index=True, max_length=22, unique=True)),
                ('title', models.CharField(max_length=500)),
                ('slug', models.CharField(blank=True, db_index=True, max_length=140, unique=True)),
                ('abstract', models.CharField(blank=True, max_length=2000, null=True)),
                ('data', miller.fields.UTF8JSONField(blank=True, default=dict, help_text='JSON format', verbose_name='metadata contents')),
                ('date', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_last_modified', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('draft', 'draft'), ('shared', 'shared'), ('public', 'public'), ('deleted', 'deleted'), ('pending', 'pending review'), ('editing', 'editing'), ('review', 'review'), ('reviewdone', 'review done'), ('preprint', 'pre print')], db_index=True, default='draft', max_length=10)),
                ('priority', models.PositiveIntegerField(db_index=True, default=0)),
                ('version', models.CharField(blank=True, default='', help_text='store the git hash for current gitted self.contents.', max_length=22)),
                ('cover', models.URLField(blank=True, max_length=500, null=True)),
                ('cover_copyright', models.CharField(blank=True, max_length=140, null=True)),
                ('source', models.FileField(blank=True, null=True, upload_to=miller.models.story.get_owner_path)),
                ('bibliography', models.FileField(blank=True, null=True, upload_to=miller.models.story.get_owner_path)),
                ('search_vector', django.contrib.postgres.search.SearchVectorField(blank=True, null=True)),
                ('authors', models.ManyToManyField(blank=True, related_name='stories', to='miller.Author')),
                ('covers', models.ManyToManyField(blank=True, related_name='covers', to='miller.Document')),
                ('documents', models.ManyToManyField(blank=True, related_name='stories', through='miller.Caption', to='miller.Document')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('stories', models.ManyToManyField(related_name='mentioned_to', through='miller.Mention', to='miller.Story')),
                ('tags', models.ManyToManyField(blank=True, to='miller.Tag')),
            ],
            options={
                'verbose_name_plural': 'stories',
            },
        ),
        migrations.AddField(
            model_name='mention',
            name='from_story',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='from_mentions', to='miller.Story'),
        ),
        migrations.AddField(
            model_name='mention',
            name='to_story',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='to_mentions', to='miller.Story'),
        ),
        migrations.AddField(
            model_name='caption',
            name='document',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='miller.Document'),
        ),
        migrations.AddField(
            model_name='caption',
            name='story',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='miller.Story'),
        ),
    ]
