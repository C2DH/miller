/**
 * @ngdoc overview
 * @name miller
 * @description
 * # miller
 *
 * Main module of the application.
 */
angular
  .module('miller', [
    'ui.router',
    'ngAnimate',
    'ngResource',
    'ngSanitize',
    'ngCookies',
    'ngTagsInput',
    'mgcrea.ngStrap',
    'monospaced.elastic',
    'LocalStorageModule',
    'pascalprecht.translate',
    // 'angular-embedly',
    'angular-embed'
  ])
  .constant('LOCALES', {
    'locales': {
      'en_US': 'English'
    },
    'preferredLocale': 'en_US'
  })
  .constant('EVENTS', {
    'SAVE': 'save',
    'BAD_REQUEST':'bad_request'
  })
  /*
    multiple input tags configuration
  */
  .config(function(tagsInputConfigProvider, RUNTIME){
    tagsInputConfigProvider
    .setDefaults('tagsInput', {
      replaceSpacesWithDashes:false,
      template: RUNTIME.static + 'templates/partials/tag.input.html' 
    })
    .setDefaults('autoComplete', {
      loadOnDownArrow: true
    });
  })
  /*
    Angular-translate configs
    Cfr. https://scotch.io/tutorials/internationalization-of-angularjs-applications
  */
  .config(function ($translateProvider, RUNTIME) {
    // $translateProvider.useMissingTranslationHandlerLog();
    $translateProvider.useSanitizeValueStrategy('sanitize');
    $translateProvider.useStaticFilesLoader({
        prefix: RUNTIME.static + 'locale/locale-',// path to translations files
        suffix: '.json'// suffix, currently- extension of the translations
    });
    $translateProvider.preferredLanguage('en_US');// is applied on first load
    
  })
  .config(function (localStorageServiceProvider) {
    localStorageServiceProvider
      .setPrefix('miller');
  })
  .config(function($resourceProvider) {
    $resourceProvider.defaults.stripTrailingSlashes = false;
  })
  .config(function($httpProvider) {
    $httpProvider.defaults.xsrfCookieName = 'csrftoken';
    $httpProvider.defaults.xsrfHeaderName = 'X-CSRFToken';

    // intercept BAD request errors
    $httpProvider.interceptors.push(function($q, $rootScope, EVENTS) {
      return {
        responseError: function(rejection) {
          // emit on 400 error (bad request, mostly form errors)
          if(rejection.status == 400){
            $rootScope.$emit(EVENTS.BAD_REQUEST, rejection);
          }
          return $q.reject(rejection);
        }
      };
    });
  })
  .config(function($locationProvider) {
    // $locationProvider.html5Mode(true);
  })
  .config(function ($stateProvider, $urlRouterProvider, RUNTIME) {
    $urlRouterProvider
      .otherwise("/");
    $stateProvider
      .state('index', {
        url: '/',
        controller: 'IndexCtrl',
        templateUrl: RUNTIME.static + 'templates/index.html',
        resolve:{
          writings: function(StoryFactory){
            return StoryFactory.get({
              filters: JSON.stringify({
                tags__category: 'writing'
                
              })
            }).$promise;
          },
          news: function(StoryFactory){
            return StoryFactory.get({
              filters: JSON.stringify({
                tags__category: 'blog'
              })
            }).$promise;
          } 
        }
      })
      .state('login', {
        url: '/login',
        controller: 'LoginCtrl',
        templateUrl: RUNTIME.static + 'templates/login.html'
      })
      .state('draft', {
        url: '/create',
        controller: 'DraftCtrl',
        templateUrl: RUNTIME.static + 'templates/draft.html'
      })
      .state('writing', {
        url: '/writing/:storyId',
        controller: 'WritingCtrl',
        templateUrl: RUNTIME.static + 'templates/draft.html',
        resolve: {
          story: function(StoryFactory, $stateParams) {
            return StoryFactory.get({id: $stateParams.storyId}).$promise;
          },
        }
      })
      .state('me', {
        abstract: true,
        url: '/me',
        controller: 'MeCtrl',
        templateUrl: RUNTIME.static + 'templates/me.html'
      })
        .state('me.stories', {
          url: '/stories',
          controller: 'ItemsCtrl',
          templateUrl: RUNTIME.static + 'templates/me.stories.html',
          resolve: {
            items: function(StoryFactory) {
              return StoryFactory.get().$promise;
            },
            model: function() {
              return 'story';
            },
            factory: function(StoryFactory) {
              return StoryFactory;
            }
          }
        })

      .state('blog', {
        url: '/blog',
        abstract:true,
        controller: 'BlogCtrl',
        templateUrl: RUNTIME.static + 'templates/blog.html',
        
      })

      .state('blog.everything', {
        url: '',
        controller: 'ItemsCtrl',
        templateUrl: RUNTIME.static + 'templates/blog.news.html',
        resolve: {
          items: function(StoryFactory, $stateParams) {
            return StoryFactory.get({
              filters: JSON.stringify({
                tags__category: 'blog'
              })
            }).$promise;
          },
          model: function() {
            return 'story';
          },
          factory: function(StoryFactory) {
            return StoryFactory;
          }
        }
      })
      
      .state('events', {
        url: '/events',
        abstract:true,
        // controller: function(){},
        templateUrl: RUNTIME.static + 'templates/events.html',
        
      })

      .state('events.everything', {
        url: '',
        controller: 'ItemsCtrl',
        templateUrl: RUNTIME.static + 'templates/blog.news.html',
        resolve: {
          items: function(StoryFactory, $stateParams) {
            return StoryFactory.get({
              filters: JSON.stringify({
                tags__category: 'event'
              })
            }).$promise;
          },
          model: function() {
            return 'story';
          },
          factory: function(StoryFactory) {
            return StoryFactory;
          }
        }
      })

      /*
        Kind of story:writings publications
      */
      .state('publications', {
        url: '/publications',
        abstract: true,
        controller: function($scope){
          $scope.urls = RUNTIME.stories.writing;
        },
        templateUrl: RUNTIME.static + 'templates/publications.html',
        
      });

      _.each(RUNTIME.stories.writing, function(d){
        $stateProvider
          .state('publications.' + d.name, {
            url: d.url,
            controller: 'ItemsCtrl',
            templateUrl: RUNTIME.static + 'templates/blog.news.html',
              resolve: {
              items: function(StoryFactory, $stateParams) {
                return StoryFactory.get({
                  filters: d.slug? JSON.stringify({
                    tags__category: 'writing',
                    tags__slug: d.slug
                  }): JSON.stringify({
                    tags__category: 'writing'
                  })
                }).$promise;
              },

              model: function() {
                return 'story';
              },
              factory: function(StoryFactory) {
                return StoryFactory;
              }
            }
          });
      });
      


    $stateProvider
      .state('post', {
        url: '/story/:postId',
        controller: 'PostCtrl',
        templateUrl: RUNTIME.static + 'templates/post.html',
        resolve: {
          post: function(StoryFactory, $stateParams) {
            return StoryFactory.get({id: $stateParams.postId}).$promise;
          },
        }
      })


      /*
        All the rest are static pages and will download the md files directly
      */
      .state('page', {
        url: '/:name',
        controller: 'PageCtrl',
        templateUrl: RUNTIME.static + 'templates/md.html',
        resolve: {
          page: function(PageFactory, $stateParams) {
            return PageFactory.get({name: $stateParams.name});
          },
        }
      });
  });

angular.module('miller')
  .filter('prefixTemplate', function (RUNTIME) {
    return function (input) {
      return RUNTIME.static + input;
    };
  })
  /*
    Translit non ascii chars and uniform punctuations signs
  */
  .filter('slugify', function(){
    return function (text) {
      var strip  = /[^\w\s-]/g,
          hyphen = /[-\s]+/g,
          slug   = text.toLowerCase();

      var map = {
        from: 'àáäãâèéëêìíïîòóöôõùúüûñç·/_,:;', 
        to  : 'aaaaaeeeeiiiiooooouuuunc------'
      };
 
      for (var i=0, j=map.from.length; i<j; i++) {
        slug = slug.replace(new RegExp(map.from.charAt(i), 'g'), map.to.charAt(i));
      }
      return slug.replace(strip, '').trim().replace(hyphen, '-');
    };
  });
/**
 * @ngdoc service
 * @name miller.services
 * @description
 * # core
 * Resource REST API service Factory.
 */
angular.module('miller')
  /*
    Get a list of stories
  */
  .factory('StoryFactory', function ($resource) {
    return $resource('/api/story/:id/', {},{
      update: {
        method:'PUT'
      },
      patch: {
        method:'PATCH'
      }
    });
  })
  .factory('StoryTagsFactory', function ($resource) {
    return $resource('/api/story/:id/tags/', {},{
      update: {
        method:'PUT'
      }
    });
  })
  .factory('StoryDocumentsFactory', function ($resource) {
    return $resource('/api/story/:id/documents/', {},{
      update: {
        method:'PUT'
      }
    });
  })
  /*
    get a list of ralreeady saved document accessible by the user
  */
  // http://localhost:8888/api/document/
  .factory('DocumentFactory', function ($resource) {
    return $resource('/api/document/:id/', {},{
      update: {
        method:'PUT'
      }
    });
  })
  .factory('CaptionFactory', function ($resource) {
    return $resource('/api/caption/:id/', {},{
      update: {
        method:'PUT'
      },
      patch: {
        method:'PATCH'
      }
    });
  })
  /*
    list tags
  */
  .factory('TagFactory', function ($resource) {
    return $resource('/api/tag/:id/', {},{
      update: {
        method:'PUT'
      }
    });
  })
  /*
    get static pages
  */
  .factory('PageFactory', function ($http, RUNTIME) {
    return {
      get: function(params) {
        return $http.get(RUNTIME.static + 'pages/' + params.name + '.md');
      }
    };
  })
  /*
    Apply marked service for custom markdown ;)
  */
  .service('markedService', function($filter) {
    return function(value, language){
      var renderer = new marked.Renderer(),
          result = '',
          ToC = [],
          docs = [];

      // split value according to language(reduce pairs)
      if(language){
        var candidate = _(value.split(/<!--\s*(lang:[a-zA-Z_]{2,5})\s*-->/))
          .compact()
          .chunk(2)
          .fromPairs()
          .value();
        // console.log(language, candidate)
        if(candidate['lang:'+language]) {
          value = candidate['lang:'+language];
        }
        //value = value.split();
      }
      // collect h1,h2, hn and get the table of contents ToC
      renderer.heading = function(text, level){
        var h = {
          text: text,
          level: level,
          slug: $filter('slugify')(text)
        };

        ToC.push(h);

        return '<h' + level + '><div class="anchor-sign" ng-click="hash(\''+ h.slug +'\')"><span class="icon-link"></span></div><a name="' + h.slug +'" class="anchor" href="#' + h.slug +'"><span class="header-link"></span></a>' + 
          text + '</h' + level + '>';
      };

      // collect miller document
      renderer.link = function(url, boh, text) {
        if(url.trim().indexOf('doc/') === 0){
          var documents = url.trim().replace('doc/','').split(',');
          for(var i in documents){
            docs.push({
              citation: text,
              slug: documents[i]
            });
          }
          return '<a name="' + documents[0] +'" ng-click="hash(\''+url+'\')"><span class="anchor-wrapper"></span>'+text+'</a>';
        }
        return '<a href='+url+'>'+text+'</a>';
      };

      renderer.image = function(src, title, alt){
        if((alt||'').indexOf('profile/') === 0){
          return '<div class="profile-thumb" style="background-image:url('+src+')"></div>';
        }
        return '<img src="'+ src+ '" title="'+title+'" alt="'+alt+'"/>';
      };

      // get the new documents and save them in background if needed.
      result = marked(value, {
        renderer: renderer
      });

      return {
        html: result,
        ToC: ToC,
        docs: docs
      };
    }; 
  });
/**
 * @ngdoc function
 * @name miller.controller:BlogCtrl
 * @description
 * # BlogCtrl
 * list stories of type blogpost.
 */
angular.module('miller')
  .controller('BlogCtrl', function ($scope, $log) {
    $log.log('BlogCtrl ready');

  });
  
/**
 * @ngdoc function
 * @name miller.controller:coreCtrl
 * @description
 * # CoreCtrl
 * common functions go here.
 */
angular.module('miller')
  .controller('CoreCtrl', function ($rootScope, $scope, $log, $location, $anchorScroll, $modal, $alert, localStorageService, $translate, $timeout, StoryFactory, TagFactory, RUNTIME, EVENTS) {    
    $log.log('CoreCtrl ready, user:', RUNTIME.user.username, RUNTIME);

    $scope.user = RUNTIME.user;

    $scope.hasToC = false;
    $scope.ToCEnabled = false;

    $scope.toggleTableOfContents = function() {
      $scope.hasToC = !$scope.hasToC;
    };

    $scope.locationPath = '';

    $scope.setToC = function(ToC) {
      $log.log('CoreCtrl > setToC data:', ToC);
      $scope.ToC = ToC;
      // $scope.ToCEnabled = false;
    };

    $scope.disableToC = function(){
      $scope.ToCDisabled = true;
    };

    // add document items to the table-of)documents
    $scope.setDocuments = function(documents) {
      $log.log('CoreCtrl > setDocuments items n.:', documents.length, documents);
      $scope.documents = documents;
    };

    $scope.save = function(){
      $log.log('CoreCtrl > @SAVE ...'); 
      $scope.$broadcast(EVENTS.SAVE);
    };

    $scope.update = function(key, value){
      $log.log('CoreCtrl > @UPDATE ',key,':',value,' ...'); 
      var _d = {};
      _d[key] = value;
      $scope.$broadcast(EVENTS.UPDATE, _d);
    };


    $scope.lock = function(){
      $log.log('CoreCtrl > lock .............'); 
      
    };

    $scope.unlock = function(){
      $log.log('CoreCtrl > unlock .............'); 
      
    };

    /*
      Suggest tags for writing purposes
    */
    $scope.suggestTags = function(query, options) {
      $log.log('CoreCtrl -> suggestTags', query, options);
      var filters = options || {};
      return TagFactory.get({
        filters: JSON.stringify(filters)
      }).$promise.then(function(response) {
        return response.results;
      });
    };
    /*
      Set breaking news above the header.
      Cfr indexCtrl
    */
    $scope.breakingNews = [];
    $scope.setBreakingNews = function(breakingNews) {
      $scope.breakingNews = breakingNews;
    };

    $rootScope.$on('$stateChangeStart', function (e, state) {
      $log.log('CoreCtrl @stateChangeStart', state);
    });

    $rootScope.$on('$stateChangeSuccess', function (e, state) {
      var h =  $location.hash();

      $log.debug('CoreCtrl @stateChangeSuccess', state.name, h);

      // clean
      $scope.ToC = [];
      $scope.documents = [];

      // the ui.router state (cfr app.js)
      $scope.state = state.name;
      $timeout($anchorScroll, 0); // wait for the next digest cycle (cfr marked directive)



    });


    $scope.setHash = function(hash) {
      $location.hash(hash);
    };

    $scope.changeLanguage = function(key) {
      $scope.language = key;
      localStorageService.set('lang', $scope.language);
      $translate.use(key);
    };
    /*
      On location change, collect the parameters.
      Since this is called BEFORE statehangeSuccess, the scrolling cannot be made at this level.
    */
    $scope.$on('$locationChangeSuccess', function (e, path) {
      $log.debug('CoreCtrl @locationChangeSuccess', path);
      $scope.qs = $location.search();
      $scope.locationPath = path;
    });

    /*
      When requested, fullsize for documents
    */
    $scope.fullsize = function(doc) {
      $log.log('CoreCtrl -> fullsize', doc);
      // Pre-fetch an external template populated with a custom scope
      // var myOtherModal = $modal({scope: $scope, template: 'modal/docs/modal.demo.tpl.html', show: false});
      // // Show when some event occurs (use $promise property to ensure the template has been loaded)
      // $scope.showModal = function() {
      //   myOtherModal.$promise.then(myOtherModal.show);
      // };

    };



    // watch 400 bad request form error. Cfr app.js interceptors.
    $rootScope.$on(EVENTS.BAD_REQUEST, function(e, rejection){
      $alert({
        placement: 'top',
        title: 'form errors', 
        'animation': 'bounceIn',
        content: _(rejection.data).map(function(d,k){
          return '<div><b>'+k+'</b>: '+d+'</div>';
        }).value().join(''),
        show: true, 
        type:'error'
      });
    });
    /*
      First load
    */
    // load language
    $scope.language = localStorageService.get('lang') || 'en_US';
    $scope.changeLanguage($scope.language);
    // load "huighlights"
    StoryFactory.get({
      filters: JSON.stringify({
        tags__category: 'highlights'
      })
    }, function(data){
      $log.info('CoreCtrl breaking news loaded', data);
      $scope.setBreakingNews(data.results);
    }); 



  });
  
/**
 * @ngdoc function
 * @name miller.controller:DraftCtrl
 * @description
 * # DraftCtrl
 * handle draft writing ;)
 */
angular.module('miller')
  .controller('DraftCtrl', function ($scope, $log, $state, localStorageService, StoryFactory, EVENTS) {
    $log.debug('DraftCtrl welcome');
    
    $scope.isDraft = true;

    $scope.tags = [];

    $scope.$on(EVENTS.SAVE, function() {
      StoryFactory.save({}, {
        title: $scope.title,
        abstract: $scope.abstract,
        contents: $scope.contents,
        status: 'draft',
        tags: _.map($scope.tags, 'id')
      }, function(res) {

        $log.log('DraftCtrl -> @EVENTS.SAVE saved:', res);
        // handle redirection.
        $state.go('writing', {
          storyId: res.id
        })
        // debugger
      });
    });

    // handle attach tag
    $scope.attachTag = function(tag) {
      $log.log('DraftCtrl -> attachTag', tag);
      $scope.tags.push(tag);
    };

    // handle delete tad
    $scope.detachTag = function(tag) {
      $log.log('DraftCtrl -> detachTag', tag);
      // get indexOf current tag
      for(var i=0,j=$scope.tags.length;i<j;i++){
        if($scope.tags[i].id == tag.id){
          $scope.tags.splice(i, 1);
          break;
        }
      }
      // $log.log($scope.tags)
    };

    _offsetables['writing-tools'] = $('#writing-tools');

    /*
      Watch for relevant changes (i;e. trigger after n milliseconds at least)
    */

    // $scope.$watch('title', function(title){
    //   if(title && title.length) {
    //     console.log('DraftCtrl @title v', title);
    //     localStorageService.set('title', title);
    //   }
    // });

    // $scope.$watch('abstract', function(abstract){
    //   if(abstract && abstract.length) {
    //     localStorageService.set('abstract', abstract);
    //   }
    // });

    // $scope.$watch('contents', function(contents){
    //   if(contents && contents.length) {
    //     localStorageService.set('contents', contents);
    //   }
    // });

    // $scope.$watch('metadata', function(metadata){
    //   if(!_.isEmpty(metadata)) {
    //     localStorageService.set('metadata', metadata);
    //   }
    // }, true);

    /*
      load from localstorageservice
    */
    // $scope.title    = localStorageService.get('title') || '';
    // $scope.abstract = localStorageService.get('abstract') || '';
    // $scope.contents = localStorageService.get('contents') || '';
    // $scope.metadata   = localStorageService.get('metadata') || {
    //   status: 'draft',
    //   tags: [],
    //   authors: []
    // };
  });
  
/**
 * @ngdoc function
 * @name miller.controller:indexCtrl
 * @description
 * # IndexCtrl
 */
angular.module('miller')
  .controller('IndexCtrl', function ($scope, $log, writings, news) {
    $log.debug('IndexCtrl welcome');

    /*
      Get the firs n sentence until the number of words are covered.
      return an array
    */
    function tokenize(text, words){
      var sentences = text.split(/[\.!\?]/);
      console.log(text, sentences);
      return sentences;
    }

    writings.results = writings.results.map(function(d) {
      d.excerpt = tokenize(d.abstract, 10)[0];
      return d;
    });

    $scope.coverstory = writings.results.shift();
    $scope.otherstories = writings.results;

    $scope.news = news.results.map(function(d) {
      d.excerpt = tokenize(d.abstract, 10)[0];
      return d;
    });



  });
  
/**
 * @ngdoc function
 * @name miller.controller:coreCtrl
 * @description
 * # CoreCtrl
 * common functions go here.
 */
angular.module('miller')
  .controller('ItemsCtrl', function ($scope, $log, items, model, factory) {
    $log.log('ItemsCtrl ready', items);

    /*
      Get the firs n sentence until the number of words are covered.
      return an array
    */
    function tokenize(text, words){
      var sentences = text.split(/[\.!\?]/);
      console.log(text, sentences);
      return sentences;
    }

    $scope.items = items.results.map(function(d){
      if(!d.abstract)
        return d;
      var sentences = tokenize(d.abstract, 10);

      d.excerpt = sentences.shift();

      if(sentences.length)
        d.difference = sentences.join('. ');

      return d;
    });

  });
  
/**
 * @ngdoc function
 * @name miller.controller:LoginCtrl
 * @description
 * # LoginCtrl
 * login!
 */
angular.module('miller')
  .controller('LoginCtrl', function ($scope, $log) {
    $log.log('LoginCtrl ready');
  });
  
/**
 * @ngdoc function
 * @name miller.controller:MeCtrl
 * @description
 * # MeCtrl
 * common functions go here.
 */
angular.module('miller')
  .controller('MeCtrl', function ($scope, $log) {
    $log.log('MeCtrl ready, user:', $scope.user);
  });
  
/**
 * @ngdoc function
 * @name miller.controller:PageCtrl
 * @description
 * # PageCtrl
 * Ctrl for static contents, delivered in markdown.
 */
angular.module('miller')
  .controller('PageCtrl', function ($scope, $log, page) {
    $log.log('PageCtrl ready', page.status);
    // $scope.post = post;
    $scope.md = page.data;

    // colllect media

    // collect h1, h2, h3
  });
  
/**
 * @ngdoc function
 * @name miller.controller:coreCtrl
 * @description
 * # CoreCtrl
 * common functions go here.
 */
angular.module('miller')
  .controller('PostCtrl', function ($scope, $log, post) {
    $log.log('PostCtrl ready', post);
    $scope.post = post;

    // $scope.cover = _(post.documents).filter({type: 'video-cover'}).first();

    // $scope.hasCoverVideo = $scope.cover !== undefined;
    
    // guess if there's a document interview
    // cfr corectrl setDocuments function.
    $scope.setDocuments = function(items) {
      $log.log('PostCtrl > setDocuments items n.:', items.length);
      var documents = [],
          unlinkeddocument = [];


      documents = _.compact([$scope.cover].concat(items.map(function(item){
        var _docs = post.documents.filter(function(doc){
          return doc.slug == item.slug;
        });

        if(!_docs.length){
          $log.error("PostCtrl > cant't find any document matching the link:",item.slug);
          return null;
        }
        return angular.extend({
          citation: item.citation
        }, _docs[0]);

      })));

      $scope.$parent.setDocuments(documents.concat(unlinkeddocument));
    };
  });
  
/**
 * @ngdoc function
 * @name miller.controller:WritingCtrl
 * @description
 * # DraftCtrl
 * handle saved story writing ;)
 */
angular.module('miller')
  .controller('WritingCtrl', function ($scope, $log, $q, $modal, story, localStorageService, StoryFactory, StoryTagsFactory, StoryDocumentsFactory, CaptionFactory, DocumentFactory, EVENTS, RUNTIME) {
    $log.debug('WritingCtrl welcome', story);

    $scope.isDraft = false;
    $scope.isSaving = false;

    $scope.title = story.title;
    $scope.abstract = story.abstract;
    $scope.contents = story.contents;
    $scope.keywords = _.filter(story.tags, {category: 'keyword'});

    $scope.displayedTags = _.filter(story.tags, function(d){
      return d.category != 'keyword';
    });

    $scope.metadata = {
      status: story.status,
      owner: story.owner
    };

    $scope.setStatus = function(status) {
      $scope.metadata.status = status;
      $scope.save();
    };

    /*
      Save or delete documents according to text contents.
    */
    var documentSlugs =  _.map(story.documents, 'slug');

    $scope.setDocuments = function(documents) {
      // check what to save vs what to discard.
      var saveable = documents.filter(function(d){
        return documentSlugs.indexOf(d.slug) == -1;
      });

      var deletable = documents.filter(function(d){
        return documentSlugs.indexOf(d.slug) == -1;
      });

      var included = _.map(documents, 'slug');

      // console.log(documentSlugs)
      $log.log('WritingCtrl -> setDocuments()', documents.length, '- to be saved:', saveable, '- to be deleted:');
      
      documents = story.documents.filter(function(d){
        return included.indexOf(d.slug) != -1;
      });

      if(saveable.length || deletable.length){
        $q.all(_.compact(
          saveable.map(function(d) {
            var p = CaptionFactory.save({
              story: story.id,
              document: d
            }, function(res){
              documents.push(res);
            }).promise;
            return p;
          })
          // .concat(deletable.map(function(d) {
          //   return CaptionFactory.save({
          //     story: story.id,
          //     document: d
          //   }, function(res){
          //     console.log('saved', res);
          //   }).promise
          // }))
        )).then(function(){
          $scope.save();
          $scope.$parent.setDocuments(documents);
        });
      } else{
        var indexed = _.keyBy(story.documents, 'slug'),
            docs = _(documents).uniq('slug').map(function(d){
              return indexed[d.slug];
            }).value();
        // console.log('indexed', docs)

        $scope.$parent.setDocuments(docs);
      }
    };

    $scope.references = [];
    $scope.lookups = [];// ref and docs and urls...

    // atthach the tag $tag for the current document.
    $scope.attachTag = function(tag) {
      $log.debug('WritingCtrl -> attachTag() tag', arguments);
      $scope.isSaving = true;
      $scope.lock();
      return StoryFactory.patch({id: story.id}, {
        tags: _.map($scope.displayedTags, 'id')
      }).$promise.then(function(res) {
        $log.debug('WritingCtrl -> attachTag() tag success', res);
        $scope.unlock();
        $scope.isSaving =false;
        return true;
      }, function(){
        // error
        return false;
      });
    };

    /*
      Detach a tag that was attached before.
    */
    $scope.detachTag = function(tag) {
      $log.debug('WritingCtrl -> detachTag() tag', arguments, $scope.displayedTags);
      $scope.isSaving = true;
      $scope.lock();
      
      return StoryFactory.patch({id: story.id}, {
        tags: _.map($scope.displayedTags, 'id')
      }).$promise.then(function(res) {
        $log.debug('WritingCtrl -> detachTag() tag success', res);
        $scope.unlock();
        $scope.isSaving =false;
        return true;
      }, function(){
        // error
        return false;
      });
    };

    $scope.suggestReferences = function(service) {
      if(!service)
        DocumentFactory.get(function(){
          console.log('list');
        });
    };
    

    $scope.save = function() {
      $log.debug('WritingCtrl @SAVE');
      $scope.isSaving = true;
      $scope.lock();
      StoryFactory.update({id: story.id}, angular.extend({
        title: $scope.title,
        abstract: $scope.abstract,
        contents: $scope.contents
      }, $scope.metadata), function(res) {
        $log.debug('WritingCtrl @SAVE: success');
        $scope.unlock();
        $scope.isSaving =false;
      });
    };

    $scope.$on(EVENTS.SAVE, $scope.save);

    // $scope.$watch('contents', function(v){
    //   console.log('changed contents');
    // });
  });
  

/**
 * @ngdoc function
 * @name miller.directives:lazy
 * @description
 * # marked
 * transform markdown data in miller enhanced datas
 */
angular.module('miller')
  .directive('lazyImage', function ($log) {
    return {
      restrict : 'A',
      scope: {
        src: '='
      },
      link : function(scope, element, attrs) {
        $log.log(':::lazy on ',scope.src);

        element.addClass('lazy-box').css({
          'background-color': '#B7B2B2',
        }).html('<div class="loading">...</div>');
        
        function wakeup(){
          element.css({
            'background-size': 'cover',
            'background-position': 'center center',
            'background-image': 'url(' + scope.src + ')'
          });
          element.find('.loading').hide();
        }

        scope.$watch('src', function(v){
          if(v)
            wakeup(); // or start watching for in page
        });

      }
    };
  });
/**
 * @ngdoc function
 * @name miller.directives:marked
 * @description
 * # marked
 * transform markdown data in miller enhanced datas
 */
angular.module('miller')
  .directive('markdown', function($compile, $log, $location){
    return {
      restrict : 'A',
      scope:{
        markdown: '=',
      },
      link : function(scope, element, attrs) {
        if(scope.markdown && scope.markdown.length) {
          element.html(marked(scope.markdown));
          $compile(element.contents())(scope);
        }
      }
    };
  })
  .directive('marked', function ($compile, $log, $location, markedService) {
   return {
      restrict : 'A',
      scope:{
        marked: '=',
        settoc: '&',
        setdocs: '&',
        language: '='
      },
      link : function(scope, element, attrs) {
        var entities = [],
            renderer = new marked.Renderer(),

            annotable = false,
            ToC = [],
            docs = [],
            lp; // previous opened heading level, for ToC purposes

        scope.hash = function(what) {
          $location.hash(what);
        };

        scope.miller = function(url){
          // ?
        };
        
        function init(){
          var rendered  = markedService(scope.marked, scope.language);

          element.html(rendered.html);
          $compile(element.contents())(scope);
          if(scope.settoc)
            scope.settoc({ToC:rendered.ToC});
          if(scope.setdocs)
            scope.setdocs({items:rendered.docs});
        }

        

        if(scope.language)
          scope.$watch('language', function(language){
            if(language)
              init();
          });
        else
          init();
      }
    };
  });
/**
 * @ngdoc function
 * @name miller.directives:lazy
 * @description
 * # marked
 * transform markdown data in miller enhanced datas
 */
angular.module('miller')
  .directive('mde', function ($log, $timeout, $modal,  $filter, DocumentFactory, OembedSearchFactory, embedService, markedService, RUNTIME) {
    return {
      restrict: 'AE',
      scope: {
        mde: '=',
        settoc: '&',
        setdocs: '&'
      },
      templateUrl: RUNTIME.static + 'templates/partials/mde.html',
      link: function(scope, el, attributes){
        // active tab
        scope.activeStates = [];

        var simplemde,
            timer,
            timer_recompile,
            timer_preview,
            wand = el.find('.wand').hide(),
            textarea = el.find('textarea').hide(),
            toolbox =  el.find('.toolbox').hide(),
            lookups=[],
            referenceModal = $modal({
              scope: scope,
              title: 'h',
              template: RUNTIME.static + 'templates/partials/modals/mde-enrich.html',
              show: false
            });
            
        function init(){
          textarea.show();
          wand.show();
          toolbox.show();

          simplemde = new SimpleMDE({
            element: textarea[0],
            spellChecker: false,
            status: false,
            toolbar: false,
            toolbarTips: false,
            initialValue: scope.mde
          });
          
          var cursor,
              pos,
              stat,
              // table of contents hash. Are there differences?
              ToCHash = '',
              pcursor;// = simplemde.codemirror.display.find('.Codemirror-cursor');

          function move(){
            if(timer)
              clearTimeout(timer);

            timer = setTimeout(function(){
              if(simplemde.codemirror.display.cursorDiv.firstChild){
                // console.log('moving cruising', simplemde.codemirror.getSelection(), 'crui')
                
                cursor = {
                  top: simplemde.codemirror.display.cursorDiv.firstChild.offsetTop,
                  left: simplemde.codemirror.display.cursorDiv.firstChild.offsetLeft,
                  height: simplemde.codemirror.display.cursorDiv.firstChild.offsetHeight
                };
                wand.css('transform', 'translateY('+(cursor.top+cursor.height-20)+'px)');
                toolbox.css('transform', 'translate('+(cursor.left)+'px,'+(cursor.top)+'px)');

                // check cursor position: is it inside a BOLD or ITALIC?
                pos = simplemde.codemirror.getCursor("start");
                stat = simplemde.codemirror.getTokenAt(pos);
                
                scope.activeStates = (stat.type || '').split(' ');
                scope.$apply();
              }
            }, 20);
            

          }

          

          /*
            Recompile with marked, analyzing the documents and
            the different stuff in the contents.
          */
          function recompile(){
            // $log.debug('::mde -> recompile() ...');
            var marked   = markedService(simplemde.value()),
                _ToCHash = md5(JSON.stringify(marked.ToC));

            $log.log('::mde -> recompile() items ToC:',marked.ToC.length, 'docs:', marked.docs.length);

            // if(_ToCHash != ToCHash){
            //   ToCHash = _ToCHash;
              scope.settoc({items:marked.ToC});
              scope.setdocs({documents: marked.docs});
              scope.$apply();
            // }
            // save the new documents?
            
          }


          simplemde.codemirror.on('update', function(e){
            // $log.debug('::mde @codemirror.update');
            var value = simplemde.value();
            if(textarea.val() != value){
              scope.mde = value; // set model
              textarea.val(value); // get headers after some time
              // scope.$apply();
            }
            move();

            if(timer_recompile)
              clearTimeout(timer_recompile);
            timer_recompile = setTimeout(recompile, 500);
            
          });

          simplemde.codemirror.on('cursorActivity', move);
          
          if(scope.settoc)
            timer_recompile = setTimeout(recompile, 0);
          
        }


        /*
          Modal tabs
        */

        // open modal tab and store previously open tab in this scope.
        scope.setTab = function(tab){
          scope.tab = tab;
        };
        scope.tab = 'CVCE';

        // preview url
        scope.previewUrl = function(url){
          if(timer_preview)
            $timeout.cancel(timer_preview);
          // check url
          var regexp = /(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&&#37;@!\-\/]))?/;
          if(!regexp.test(url)){
            $log.error('::mde -> previewUrl url provided:', url, 'is not valid');
            return false;
          }
          url = url.replace('#', '.hash.');
          timer_preview = $timeout(function(){
            $log.debug('::mde -> previewUrl', url);
            embedService.get(url).then(function(data){
              scope.embed = data;
            });
          }, 20);
        };

        // suggest from different archives, w timeout
        scope.suggestResults = [];
        scope.suggestMessage = '';
        scope.suggest = function(query, service){
          $log.log('::mde -> suggest()', scope.query, query, OembedSearchFactory);
          if(query.length < 3) {
            scope.suggestMessage = '(write something more)';
            scope.suggestResults = [];
            return;
          }
          scope.suggestMessage = '(loading...)';
          if(OembedSearchFactory[service])
            OembedSearchFactory[service](query).then(function(res){
              scope.suggestResults = res.data.results;
              scope.suggestMessage = '(<b>' + res.data.count + '</b> results)';
            });
        };

        // open
        scope.showReferenceModal = function(){
          referenceModal.$promise.then(function(){
            $log.log('::mde -> showReferenceModal called');
            referenceModal.show();
          });
          
          DocumentFactory.get(function(res){
            $log.log('::mde -> showReferenceModal documents loaded', res.results.length);

            scope.lookups = res.results;
          });
          // console.log(simplemde)
          // debugger
        };

      

        scope.addDocument = function(type, contents, reference, url, embed){
          var slug;

          $log.debug('::mde -> addDocument() type:', type);

          if(type=='bibtex'){
            $log.debug('    reference:', bibtexParse.toJSON(reference));
            return;
          }
          // case it is an url
          if(type=='url'){
            slug = $filter('slugify')(embed.title);

            DocumentFactory.save({
              title: embed.title,
              contents: JSON.stringify(embed),
              type: (embed.type|| 'link').toLowerCase(),
              slug:  slug,
              url: url
            }, function(res){
              $log.debug('::mde -> addDocument() document saved:', res.slug, res.id, res.short_url);
              if(res.slug){
                referenceModal.hide();
                SimpleMDE.drawLink(simplemde,{
                  url: 'doc/' + res.slug
                });
              }
            }, function(err){
              // debugger
              // ignore duplicates and put it directly.
              if(err.data.slug){
                SimpleMDE.drawLink(simplemde,{
                  url: 'doc/' + slug
                });
              }
            });
            return;
          }

          if(!scope.selectedDocument) {
            $log.warn('::mde -> addDocument() no document selected');
            return;
          }

          if(type == 'CVCE'){
            slug = 'cvce/'+scope.selectedDocument.details.doi;
            $log.debug('::mde -> addDocument() doc:', slug);
            DocumentFactory.save({
              title: scope.selectedDocument.title,
              contents: JSON.stringify(scope.selectedDocument),
              type: (scope.selectedDocument.type|| 'link').toLowerCase(),
              slug:  slug,
              url: url
            }, function(res){
              $log.debug('::mde -> addDocument() document saved:', res.slug, res.id, res.short_url);
              if(res.slug){
                referenceModal.hide();
                SimpleMDE.drawLink(simplemde,{
                  url: 'doc/' + res.slug
                });
              }
            }, function(err){
              // debugger
              // ignore duplicates and put it directly.
              if(err.data.slug){
                $log.debug('::mde -> addDocument() document already saved:', slug);
                SimpleMDE.drawLink(simplemde,{
                  url: 'doc/' + slug
                });
              }
            });
            return;
          }
          // the document has been selected.
          $log.debug('::mde -> addDocument() doc:', scope.selectedDocument);
          // lock ui
          // draw link at the end of the db
          referenceModal.hide();
          SimpleMDE.drawLink(simplemde,{
            url: 'doc/' + scope.selectedDocument.slug
          });
        };

        scope.selectDocument = function(doc){
          $log.log('::mde -> selectDocument()', doc);
          if(scope.selectedDocument)
            scope.selectedDocument.isSelected = false;
          if(scope.selectedDocument && (scope.selectedDocument.id == doc.id)){
            scope.isSomethingSelected = false;
            scope.selectedDocument = false;
          } else {
            doc.isSelected = true;
            scope.isSomethingSelected = true;
            scope.selectedDocument = doc;
          }
          
          
        };

        scope.action = function(action) {
          SimpleMDE[action](simplemde);
        };
        
        // take into account custom font-face rendering.
        $timeout(init, 200);
        return;


      }
    };
  });